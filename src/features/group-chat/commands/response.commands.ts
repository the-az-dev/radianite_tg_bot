
import { isGroup } from "../../../shared/utils";
import { userRepository } from "../../../shared/repositories";
import { chatFindId, needReplyMessage, notForFindThread } from "../../../shared/constants";
import { Telegraf } from "telegraf";

export default class ResponseCommands {
  constructor(private bot: Telegraf) {
    this.bot.command("stats", this.globalStats);
    this.bot.command("find", this.findPlayers);
    this.bot.command("info", this.playerInfo);
    this.bot.command("reg", this.registrationUser);
  }
  registrationUser = async (ctx) => {
    console.log(ctx.from);

    const currUser = await userRepository.findOneBy({ userId: ctx.from.id });

    if(currUser !== null) return ctx.reply("–¢–æ–±—ñ –º–∞–ª–æ –±—É–ª–æ –ø—Ä–∏–≥–æ–¥ –∑ –ü—Ä–µ–º º—î—Ä? –¢–∏ –≤–∂–µ –≤ —Å–∏—Å—Ç–µ–º—ñ üôÉ");
    
    const newUser = userRepository.create({
      userId: ctx.from.id,
      username: ctx.from.username,
      warningLimits: 3,
      reputation: 0,
      mmr: 0,
      updatedAt: new Date(),
      updatedMmrAt: new Date(),
    });
    await userRepository.save(newUser);

    ctx.reply("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤ –≤ —Å–∏—Å—Ç–µ–º—ñ '–®–ª—è—Ö'! –ó –≤–∞—Å 5–∫ –∑–µ–ª–µ–Ω–∏—Ö!")
  }
  playerInfo = async (ctx) => {
    const chatType = ctx.chat.type;
    if (!isGroup(chatType)) return;

    const replyTo = ctx.message.reply_to_message;
    if (!replyTo) return ctx.reply(needReplyMessage);

    if (replyTo.from.id === ctx.botInfo.id)
      return ctx.reply("–®—É–∫–∞—Ç–∏ —ñ–Ω—Ñ—É –ø—Ä–æ –±–æ—Ç–∞? –¢–∏ —Ä–µ–∞–ª—å–Ω–æ? –ù—É –æ–∫ ü•∏\n–Ø –£–ª—å—Ç—Ä–∞_–ú–ï–ì–ê_—Å—É–ø–µ—Ä_–¥—É–ø–µ—Ä_—Ä—ñ–≤–µ—Ä_–ø—Ä–∞–π–º –†–∞–¥—ñ–∞–Ω—Ç 3000 üòà\n–ü–∏—Ç–∞–Ω–Ω—è? üôÉ");

    console.log(ctx);

    ctx.reply("–Ø —Ç–æ–±—ñ –Ω–µ –§–ë–† –∞–±–∏ —Ä–æ–∑–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–æ —Ç—ñ–ø–∞. –ù–µ –Ω–∞ —Ç–æ–≥–æ –Ω–∞–ø–∞–≤ ü§¨");
  };
  findPlayers = async (ctx) => {
    const chatType = ctx.chat.type;
    if (!isGroup(chatType)) return;
    if(ctx.message.message_thread_id !== chatFindId) return ctx.reply(notForFindThread);
    ctx.reply("–†—ñ–æ—Ç–∏ –≤–∫–ª—é—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö –æ—Ç —ñ –∑–Ω–∞–π–¥—É!");
    
  };
  globalStats = async (ctx) => {
    const chatType = ctx.chat.type;
    if (!isGroup(chatType)) return;

    ctx.reply("- –ê–ª–æ üìû\n- –¶–µ –°–¢–ë?\n- –ú–µ–Ω–µ –ø—Ä–æ—Å—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≤–∏ —Å–∫–∏–Ω–µ—Ç–µ?\n- –ê–≥–∞...\n- –°—É–ø–µ—Ä! –î—è–∫—É—é!\n\n–°–∫–∞–∑–∞–ª–∏ –ø—ñ—Ç–∏ –Ω–∞—Ö—É–π...");
  };
}
