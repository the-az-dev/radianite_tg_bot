import {
  mmrCountingCoef,
  needReplyMessage,
  randomBonus,
  reputationCooldown,
} from "../../../shared/constants";
import { isGroup } from "../../../shared/utils";
import { Telegraf } from "telegraf";
import { userRepository } from "../../../shared/repositories";

export default class ReputationCommands {
  constructor(private bot: Telegraf) {
    this.bot.hears(/^\+rep( .*)?/, this.addReputation);
    this.bot.hears(/^\-rep( .*)?/, this.divideReputation);
  }
  divideReputation = async (ctx) => {
    const chatType = ctx.chat.type;
    if (!isGroup(chatType)) return;
    const replyTo = ctx.message.reply_to_message;
    if (!replyTo) {
      return ctx.reply(needReplyMessage);
    }

    if (replyTo.from.id === ctx.from.id)
      return ctx.reply("–ó–Ω—è—Ç–∏ –≤ —Å–∞–º–æ–≥–æ —Å–µ–±–µ? üò≥ –ù—É –æ–∫–µ–π... –í–∂—É—Ö ü™Ñ");

    const userId = replyTo.from.id;

    const currUser = await userRepository.findOneBy({ userId: userId });

    if(currUser === null || currUser === undefined) ctx.reply("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /reg –∞–±–∏ –¥–æ–¥–∞—Ç–∏—Å—å –¥–æ —Å–∏—Å—Ç–µ–º–∏ üòâ")

    const now = new Date();
    const diffInMs = now.getTime() - currUser.updatedAt.getTime();
    const diffInDays = diffInMs / (1000 * 60 * 60 * 24);

    if (diffInDays <= reputationCooldown && currUser.reputation !== 0) {
      return ctx.reply("–¶–µ–π —é–∑–µ—Ä –≤–∂–µ –º–∞—î –æ–Ω–æ–≤–ª–µ–Ω—É —Ä–µ–ø—É—Ç–∞—Ü—ñ—é!");
    }

    if (currUser.reputation === 0)
      return ctx.reply("–ö—É–¥–∏ –≤–∂–µ –¥–∞–ª—ñ –ø–æ–Ω–∏–∂–∞—Ç–∏ –∫–æ–ª–∏ –π —Ç–∞–∫ 0? ü§£");

    currUser.reputation = currUser.reputation - 5;
    if (currUser.reputation <= 0) currUser.mmr_rep = 0;
    else
      currUser.mmr_rep =
        currUser.mmr_rep + (mmrCountingCoef * currUser.reputation) + randomBonus;
    currUser.updatedAt = new Date();

    await userRepository.save(currUser);

    ctx.reply(`üìâ –ó–Ω—è–≤ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é —É @${replyTo.from.username || userId}`);
  };
  addReputation = async (ctx) => {
    const chatType = ctx.chat.type;
    if (!isGroup(chatType)) return;
    const replyTo = ctx.message.reply_to_message;
    if (!replyTo) {
      return ctx.reply(needReplyMessage);
    }

    if (replyTo.from.id === ctx.from.id) return ctx.reply("–û—Ç–æ –≤–∂–µ –Ω–∞—Ä—Ü–∏—Å üòÅ");

    const userId = replyTo.from.id;

    const currUser = await userRepository.findOneBy({ userId: userId });

    if(currUser === null || currUser === undefined) ctx.reply("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /reg –∞–±–∏ –¥–æ–¥–∞—Ç–∏—Å—å –¥–æ —Å–∏—Å—Ç–µ–º–∏ üòâ")

    const now = new Date();
    const diffInMs = now.getTime() - currUser.updatedAt.getTime();
    const diffInDays = diffInMs / (1000 * 60 * 60 * 24);

    if (diffInDays <= reputationCooldown && currUser.reputation !== 0) {
      return ctx.reply("–¶–µ–π —é–∑–µ—Ä –≤–∂–µ –º–∞—î –æ–Ω–æ–≤–ª–µ–Ω—É —Ä–µ–ø—É—Ç–∞—Ü—ñ—é!");
    }

    currUser.reputation = currUser.reputation + 5;
    currUser.mmr_rep =
      currUser.mmr_rep + (mmrCountingCoef * currUser.reputation) + randomBonus;
    currUser.updatedAt = new Date();

    await userRepository.save(currUser);

    ctx.reply(`üìà –ü—ñ–¥–Ω—è–≤ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é –¥–ª—è @${replyTo.from.username || userId}`);
  };
}
